from __future__ import absolute_import
from __future__ import division
from __future__ import print_function


from yacs.config import CfgNode as CN


_C = CN()

# ----- BASIC SETTINGS -----
_C.NAME = "default"
_C.OUTPUT_DIR = "/home/cifar10/output"
_C.VALID_STEP = 5
_C.SAVE_STEP = 5
_C.SHOW_STEP = 20
_C.PIN_MEMORY = True
_C.INPUT_SIZE = (380, 380)
_C.RESUME_MODEL = ""
_C.RESUME_MODE = "all"
_C.CPU_MODE = False
_C.EVAL_MODE = False
_C.RANDOM_SEED = 8664

# ----- DATASET BUILDER -----
_C.DATASET = CN()
_C.DATASET.DATASET_TRAIN = "EFF_LANDMARK_MASKSET"
_C.DATASET.DATASET_VALID = "EFF_VALID"
_C.DATASET.ROOT = "/home/cifar10/data"
_C.DATASET.TRAIN_TXT = ""
_C.DATASET.VALID_TXT = ""
_C.DATASET.TRAIN_FRAMES = 20
_C.DATASET.VALID_FRAMES = 20
_C.DATASET.REALFAKE = 4
_C.DATASET.NEWFACE = False
_C.DATASET.NEWFACE_NAME = 'faces1.3'
_C.DATASET.LANDMARK = CN()
_C.DATASET.LANDMARK.THICK = 1
_C.DATASET.LANDMARK.EYE_RATE = 0.7
_C.DATASET.LANDMARK.EYE_DILA = 8
_C.DATASET.LANDMARK.NOSE_RATE = 0.8
_C.DATASET.LANDMARK.NOSE_DILA = 8
_C.DATASET.LANDMARK.MOUTH_RATE = 0.9
_C.DATASET.LANDMARK.MOUTH_DILA = 6

# ----- BACKBONE BUILDER -----
_C.BACKBONE = CN()
_C.BACKBONE.TYPE = "EfficientNetAutoB7"
_C.BACKBONE.NUM_CLASSES = 1
_C.BACKBONE.DROPOUT_RATE = 0
_C.BACKBONE.BLOCK_IDX = [2, 5]
_C.BACKBONE.DROP_RATE = 0.75

# ----- LOSS BUILDER -----
_C.LOSS = CN()
_C.LOSS.LOSS1_TYPE = "BCE_Loss"
_C.LOSS.LOSS2_TYPE = "L1_Loss"

# ----- TRAIN BUILDER -----
_C.TRAIN = CN()
_C.TRAIN.BATCH_SIZE = 32
_C.TRAIN.MAX_EPOCH = 60
_C.TRAIN.NITER = 15
_C.TRAIN.SHUFFLE = True
_C.TRAIN.NUM_WORKERS = 8
_C.TRAIN.COLLATE_FN = "collate_fn_2"
_C.TRAIN.LOSS_RATIO = CN()
_C.TRAIN.LOSS_RATIO.MASK2 = 0.2
_C.TRAIN.LOSS_RATIO.MASK5 = 0.8
_C.TRAIN.LOSS_RATIO.MASK = 1.0
_C.TRAIN.TENSORBOARD = CN()
_C.TRAIN.TENSORBOARD.ENABLE = True

_C.TRAIN.OPTIMIZER = CN()
_C.TRAIN.OPTIMIZER.TYPE = "SGD"
_C.TRAIN.OPTIMIZER.BASE_LR = 0.001
_C.TRAIN.OPTIMIZER.MOMENTUM = 0.9
_C.TRAIN.OPTIMIZER.WEIGHT_DECAY = 0.001


_C.TRAIN.LR_SCHEDULER = CN()
_C.TRAIN.LR_SCHEDULER.TYPE = "multistep"
_C.TRAIN.LR_SCHEDULER.LR_STEP = [40, 50]
_C.TRAIN.LR_SCHEDULER.LR_FACTOR = 0.1
_C.TRAIN.LR_SCHEDULER.PATIENCE = 10
_C.TRAIN.LR_SCHEDULER.WARM_EPOCH = 5
_C.TRAIN.LR_SCHEDULER.COSINE_DECAY_END = 0

# -----testing--------
_C.TEST = CN()
_C.TEST.BATCH_SIZE = 12
_C.TEST.NUM_WORKERS = 1

def update_config(cfg, args):
    cfg.defrost()
    cfg.merge_from_file(args.cfg)
    cfg.merge_from_list(args.opts)

    cfg.freeze()